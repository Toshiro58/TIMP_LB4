/** @file
 *  @author Пономарев А.А
 *  @version 1.0
 *  @date 04.12.2024
 *  @copyright ИБСТ ПГУ
 *  @warning Это учебный пример
 *  @brief Заголовочный файл для модуля шифрования методом маршутной перестановки
 */

#pragma once
#include <string>
#include <stdexcept>
#include <codecvt>

/** 
 *  @class TableCipher
 *  @brief Класс для шифрования и дешифрования текста с использованием таблицы.
 *  
 *  Данный класс реализует шифрование и дешифрование текста на основе заданного ключа. 
 *  Ключ должен быть валидным и соответствовать определённым требованиям.
 */
class TableCipher
{
private:
    int key; ///< Ключ для шифрования и дешифрования.

public:
    /** @brief Конструктор класса TableCipher.
     *  @details Конструктор инициализирует объект с заданным ключом, который должен быть 
     *           валидным. Если ключ не валиден, будет выброшено исключение.
     *  @param key_str Строка, представляющая ключ для шифрования.
     *  @throw cipher_error Если ключ недействителен.
     */
    TableCipher() = delete; 
    TableCipher(const std::wstring& key_str);   

    /** @brief Шифрует заданный текст.
     *  @details Метод принимает открытый текст и возвращает зашифрованный текст на основе 
     *           заданного ключа.
     *  @param text Открытый текст, который необходимо зашифровать.
     *  @return Зашифрованный текст.
     */
    std::wstring encrypt(const std::wstring& text);

    /** @brief Дешифрует зашифрованный текст.
     *  @details Метод принимает зашифрованный текст и возвращает открытый текст, используя 
     *           тот же ключ, что и при шифровании.
     *  @param encrypted_text Зашифрованный текст, который необходимо расшифровать.
     *  @return Открытый текст.
     */
    std::wstring decrypt(const std::wstring& encrypted_text);

    /** @brief Проверяет валидность ключа.
     *  @details Метод проверяет, является ли переданная строка валидным ключом для 
     *           шифрования. Если ключ недействителен, будет выброшено исключение.
     *  @param key_str Строка, представляющая ключ для проверки.
     *  @return Валидный целочисленный ключ.
     *  @throw cipher_error Если ключ недействителен.
     */
    int getValidKey(const std::wstring& key_str);

    /** @brief Проверяет валидность открытого текста.
     *  @details Метод проверяет, является ли переданная строка валидным открытым текстом. 
     *           Если текст недействителен, будет выброшено исключение.
     *  @param s Строка, представляющая открытый текст для проверки.
     *  @return Валидный открытый текст.
     *  @throw cipher_error Если открытый текст недействителен.
     */
    std::wstring getValidOpenText(const std::wstring & s);

    /** @brief Проверяет валидность зашифрованного текста.
     *  @details Метод проверяет, является ли переданная строка валидным зашифрованным текстом. 
     *           Если текст недействителен, будет выброшено исключение.
     *  @param s Строка, представляющая зашифрованный текст для проверки.
     *  @return Валидный зашифрованный текст.
     *  @throw cipher_error Если зашифрованный текст недействителен.
     */
    std::wstring getValidCipherText(const std::wstring & s);
};

/** 
 *  @class cipher_error
 *  @brief Класс для обработки ошибок шифрования.
 *
 *  Данный класс расширяет стандартное исключение std::invalid_argument для обработки ошибок,
 *  связанных с шифрованием и дешифрованием текста.
 */
class cipher_error : public std::invalid_argument
{
public:
    /** @brief Конструктор класса cipher_error с сообщением об ошибке.
     *  @param what_arg Сообщение об ошибке в виде строки.
     */
    explicit cipher_error(const std::string& what_arg)
        : std::invalid_argument(what_arg)
    {
    }

    /** @brief Конструктор класса cipher_error с сообщением об ошибке в виде C-строки.
     *  @param what_arg Сообщение об ошибке в виде C-строки.
     */
    explicit cipher_error(const char* what_arg)
        : std::invalid_argument(what_arg)
    {
    }
};
